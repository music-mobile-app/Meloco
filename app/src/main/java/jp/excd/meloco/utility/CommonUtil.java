//--------------------------------------------
// 汎用ユーティリティー
//--------------------------------------------
package jp.excd.meloco.utility;

import android.util.Log;

public class CommonUtil {
    //----------------------------------------------------------------
    public static String TAG_FOR_LOG = "アプリ出力ログ";
    //----------------------------------------------------------------
    // ログ出力用のタグ取得
    //   インスタンスメソッドの場合
    //----------------------------------------------------------------
    public static String tag(Object o) {

        String s = TAG_FOR_LOG + " " + o.getClass().getSimpleName();
        return s;
    }
    //----------------------------------------------------------------
    // ログ出力用のタグ取得
    //   スタティックメソッドの場合
    //----------------------------------------------------------------
    public static String tag() {
        return TAG_FOR_LOG;
    }
    //----------------------------------------------------------------------------------------------
    // 16bit⇒8bit変換
    //----------------------------------------------------------------------------------------------
    public static byte[] from16to8(short[] shorts) {

        byte[] ret = new byte[shorts.length];
        for (int i =0; i < ret.length; i++) {
            ret[i] = (byte)shorts[i];
        }
        return ret;
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの重ね合わせ
    // 処理概要：与えられた２つの波形データを単純加算して返却する。
    //           重ね合わせた結果がintを越える場合は、intの最大値に補正する。
    // 注意点  ：与える２つの配列の数が違う場合、第１引数の数に合わせられる。
    // 引数１　：重ね合わせる対象の配列（元）
    // 引数２　：重ね合わせる対象の配列（加算対象）
    // 戻り値　：加算した波形配列
    //----------------------------------------------------------------------------------------------
    public static int[] addWave(int[] a, int[] b) {

        //返却する配列
        int[] rets = new int[a.length];

        for(int i = 0; i < rets.length; i++) {
            long wave = 0;
            if (i < b.length) {
                wave = a[i] + b[i];
            } else {
                wave = a[i];
            }
            //丸目
            if (wave >= Integer.MAX_VALUE) {
                wave = Integer.MAX_VALUE;
            } else if (wave <= Integer.MIN_VALUE){
                wave = Integer.MIN_VALUE;
            }
            rets[i] = (int)wave;
        }
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データをshortの範囲まで圧縮する。
    // 引数１　：圧縮前のint配列
    // 戻り値　：圧縮後のshort配列
    //----------------------------------------------------------------------------------------------
    public static short[] compressWaveData(int[] is) {
        //返却する配列
        short[] rets = new short[is.length];

        for (int i = 0; i < rets.length; i++) {
            rets[i] = compressIntToShort(is[i]);
        }
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データをshortの範囲まで圧縮する。
    // 引数１　：圧縮前のint配列
    // 戻り値　：圧縮後のshort配列
    //----------------------------------------------------------------------------------------------
    public static short compressIntToShort(int i) {
        //実装する。
        return 0;
    }
}
