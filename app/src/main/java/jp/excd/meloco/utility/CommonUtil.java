//--------------------------------------------
// 汎用ユーティリティー
//--------------------------------------------
package jp.excd.meloco.utility;

import android.media.AudioFormat;
import android.util.Log;

import jp.excd.meloco.audio.engine.AudioConfig;

public class CommonUtil {
    //----------------------------------------------------------------
    public static String TAG_FOR_LOG = "アプリ出力ログ";
    //----------------------------------------------------------------
    // ログ出力用のタグ取得
    //   インスタンスメソッドの場合
    //----------------------------------------------------------------
    public static String tag(Object o) {

        String s = TAG_FOR_LOG + " " + o.getClass().getSimpleName();
        return s;
    }
    //----------------------------------------------------------------
    // ログ出力用のタグ取得
    //   スタティックメソッドの場合
    //----------------------------------------------------------------
    public static String tag() {
        return TAG_FOR_LOG;
    }
    //----------------------------------------------------------------------------------------------
    // 16bit⇒8bit変換
    //----------------------------------------------------------------------------------------------
    public static byte[] from16to8(short[] shorts) {

        byte[] ret = new byte[shorts.length];
        for (int i =0; i < ret.length; i++) {
            ret[i] = (byte)shorts[i];
        }
        return ret;
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの重ね合わせ
    // 処理概要：与えられた２つの波形データを単純加算して返却する。
    //           重ね合わせた結果がintを越える場合は、intの最大値に補正する。
    // 注意点  ：与える２つの配列の数が違う場合、第１引数の数に合わせられる。
    // 引数１　：重ね合わせる対象の配列（元）
    // 引数２　：重ね合わせる対象の配列（加算対象）
    // 戻り値　：加算した波形配列
    //----------------------------------------------------------------------------------------------
    public static int[] addWave(int[] a, int[] b) {

        //返却する配列
        int[] rets = new int[a.length];

        for(int i = 0; i < rets.length; i++) {
            long wave = 0;
            if (i < b.length) {
                wave = a[i] + b[i];
            } else {
                wave = a[i];
            }
            //単純まるめ
            if (wave >= Integer.MAX_VALUE) {
                wave = Integer.MAX_VALUE;
            } else if (wave <= Integer.MIN_VALUE){
                wave = Integer.MIN_VALUE;
            }
            rets[i] = (int)wave;
        }
        return rets;
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データを、AudioTrackが受け取るエンコーディングの範囲まで圧縮する。
    //           戻り値はshortであるが、エンコーディングが8BITの場合は、byteの範囲までが入る。
    // 引数１　：圧縮前のint配列
    // 戻り値　：圧縮後のshort配列
    //----------------------------------------------------------------------------------------------
    public static short[] compressWaveData(int[] is) {
        //返却する配列
        short[] rets = new short[is.length];

        for (int i = 0; i < rets.length; i++) {
            rets[i] = compressWaveData(is[i]);
        }
        return rets;
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データを、AudioTrackが受け取るエンコーディングの範囲まで圧縮する。
    //           戻り値はshortであるが、エンコーディングが8BITの場合は、byteの範囲までが入る。
    // 引数１　：圧縮前のint
    // 戻り値　：圧縮後のshort
    //----------------------------------------------------------------------------------------------
    public static short compressWaveData(int inI) {

        //------------------------------------------------------------------------------------------
        // エンコーディングのフォーマットの判断
        //------------------------------------------------------------------------------------------
        if (AudioConfig.AUDIO_FORMAT == AudioFormat.ENCODING_PCM_8BIT) {
            return compressIntToShort(inI);
        } else if (AudioConfig.AUDIO_FORMAT == AudioFormat.ENCODING_PCM_16BIT) {
            return compressIntToByte(inI);
        }
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データを16bitに圧縮して返却する。
    // 引数１　：圧縮前のint
    // 戻り値　：圧縮後のshort
    //----------------------------------------------------------------------------------------------
    public static short compressIntToShort(int inI) {

        //TODO 修正する。

        //------------------------------------------------------------------------------------------
        //圧縮後のサイズの取得
        //------------------------------------------------------------------------------------------
        int compressSize = 8;
        if (AudioConfig.AUDIO_FORMAT == AudioFormat.ENCODING_PCM_8BIT) {
            compressSize = 8;
        } else if (AudioConfig.AUDIO_FORMAT == AudioFormat.ENCODING_PCM_16BIT) {
            compressSize = 16;
        }
        //------------------------------------------------------------------------------------------
        //圧縮のしきい値の取得
        //------------------------------------------------------------------------------------------
        int border = AudioConfig.COMPRESS_BORDER;
        int lowLimit = 0;
        int highLimit = 0;
        if (compressSize == 8) {
            lowLimit = (Byte.MIN_VALUE * (border / 100));
            highLimit = (Byte.MAX_VALUE * (border / 100));
        } else {
            lowLimit = (Short.MIN_VALUE * (border / 100));
            highLimit = (Short.MAX_VALUE * (border / 100));
        }
        //------------------------------------------------------------------------------------------
        // 圧縮の最大値と、最大値までの幅を算出
        //------------------------------------------------------------------------------------------
        int lowRenge =

        //------------------------------------------------------------------------------------------
        //圧縮のしきい値を越えているかチェック
        //------------------------------------------------------------------------------------------
        if (inI < lowLimit) {
            //圧縮
            //線形で、Limitまでの比をかけ合わせる。

        }



        return 0;
    }
    //----------------------------------------------------------------------------------------------
    // 名称    ：波形データの圧縮
    // 処理概要：与えられた波形データを8bitに圧縮して返却する。
    // 引数１　：圧縮前のint
    // 戻り値　：圧縮後のshort(8bitの値が入っている)
    //----------------------------------------------------------------------------------------------
    public static short compressIntToByte(int inI) {

        return 0;
    }
}
